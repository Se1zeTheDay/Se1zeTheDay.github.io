<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ACM经典数塔问题</title>
    <url>/2020/04/24/ACM%E7%BB%8F%E5%85%B8%E6%95%B0%E5%A1%94%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="ACM经典数塔问题"><a href="#ACM经典数塔问题" class="headerlink" title="ACM经典数塔问题"></a>ACM经典数塔问题</h1><p>此题为动态规划法的简单训练题。  </p>
<h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>我们假设数组 p[i][j] 来表示数塔中的数，m[i][j] 表示从数塔顶端开始到第 i 行第 j 列的最大路径长度。<br>由题意可知，每一步只能沿左斜线向下或右斜线向下，那么很容易得到<br><strong>m[i][j] = max{m[i-1][j-1], m[i-1][j]} + p[i][j]</strong><br>注意不要忘记边界条件，即 <strong>j = 1</strong> 或 <strong>j = i</strong> 时，<br><strong>m[i][j] = m[i-1][j] + p[i][j]</strong></p>
<h2 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M 50</span></span><br><span class="line"><span class="keyword">int</span> m[M][M]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> p[M][M]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mathTower</span><span class="params">(<span class="keyword">int</span> (*m)[M], <span class="keyword">int</span> (*p)[M],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(j == <span class="number">1</span> || j == i)</span><br><span class="line">            &#123;</span><br><span class="line">                m[i][j] = m[i<span class="number">-1</span>][j] + p[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                m[i][j] = <span class="built_in">max</span>(m[i<span class="number">-1</span>][j<span class="number">-1</span>], m[i<span class="number">-1</span>][j]) + p[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;p[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    mathTower(m,p,n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>,m[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    k = m[n][<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>( m[n][j] &gt;= k)</span><br><span class="line">        &#123;</span><br><span class="line">            k = m[n][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, k);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="对数塔问题的优化"><a href="#对数塔问题的优化" class="headerlink" title="对数塔问题的优化"></a>对数塔问题的优化</h2><p>由以上分析可知，我们在解决数塔问题时采用的是由顶向下的路线，我们可以反过来<strong>自下而上</strong>考虑。<br>对于问题规模 n = 2 的数塔，共有两条路径。<br>对于问题规模 n = 3 的数塔，我们可以将其看作两个规模为 n = 2的数塔加上塔顶。<br>以此类推。。。<br>此时数塔问题可以用一个式子来刻画<br><strong>m[i][j] += max(m[i+1][j], m[i+1][j+1])</strong><br>m[i][j]数组既保存了数塔中的数，又在动态规划过程中逐步形成最优解，即<strong>m[1][1]</strong></p>
]]></content>
      <categories>
        <category>算法设计与分析</category>
      </categories>
      <tags>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>TSP问题</title>
    <url>/2020/05/02/TSP%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="TSP问题"><a href="#TSP问题" class="headerlink" title="TSP问题"></a>TSP问题</h1><h2 id="TSP问题的简介"><a href="#TSP问题的简介" class="headerlink" title="TSP问题的简介"></a>TSP问题的简介</h2><p>TSP问题即旅行商问题，该问题是在寻求单一旅行者由起点出发，通过所有给定的需求点之后，最后再回到原点的最短路径</p>
<h2 id="建立问题模型"><a href="#建立问题模型" class="headerlink" title="建立问题模型"></a>建立问题模型</h2><p>用图来表示该问题的模型，设图 G = (V, E),顶点代表城市，边的权值代表城市之间的路径长度。<br>用二维数组 g[i][j]来表示该图，g[i][j]表示从点 i 到点 j 的权值，若 i 与 j 不相邻，那么g[i][j] = -1，若相邻则表示权值。<br>数组x[i]用来表示解向量。</p>
<h2 id="问题的解空间"><a href="#问题的解空间" class="headerlink" title="问题的解空间"></a>问题的解空间</h2><p>该问题显然解空间为排列树，大小为n！</p>
<h2 id="剪枝函数"><a href="#剪枝函数" class="headerlink" title="剪枝函数"></a>剪枝函数</h2><p>显然城市之间首先应该相邻，即 <strong>g[x[t-1]][x[t]] != -1</strong>，其次最后一个城市与第一个城市也得有路径相连，即 <strong>g[x[n]][x[1]] != -1</strong>。<br>设 cp 表示当前走过的路径的长度，bestp 表示以前找到的最短路径的长度。显然，若 cp &gt; bestp，那么没有必要在这条路线上继续搜索下去。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>一开始自己写，有一说一，我是真的菜，分析了一下原因在于回溯后状态应该变为原来的状态，而且若不采用m数组，那么状态无法恢复，而我忘记了这件事，改好后的代码如下。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//g数组表示图G (V, E)</span></span><br><span class="line"><span class="keyword">int</span> g[<span class="number">5</span>][<span class="number">5</span>] = &#123; &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">                &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">20</span>,<span class="number">6</span>,<span class="number">4</span>&#125;,</span><br><span class="line">                &#123;<span class="number">0</span>,<span class="number">20</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">10</span>&#125;,</span><br><span class="line">                &#123;<span class="number">0</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">15</span>&#125;,</span><br><span class="line">                &#123;<span class="number">0</span>,<span class="number">4</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">0</span>&#125; &#125;;</span><br><span class="line"><span class="comment">//bestp表示最优路径值</span></span><br><span class="line"><span class="keyword">int</span> bestp = <span class="number">100</span>;</span><br><span class="line"><span class="comment">//x[5]数组暂存最优解</span></span><br><span class="line"><span class="keyword">int</span> x[<span class="number">5</span>] = &#123; <span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span> &#125;;</span><br><span class="line"><span class="comment">//cp表示当前路径之和</span></span><br><span class="line"><span class="keyword">int</span> cp = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//m数组表示每个点是否被选过，1说明被选过，0则没有</span></span><br><span class="line"><span class="keyword">int</span> m[<span class="number">5</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="comment">//k数组最终存放最优解</span></span><br><span class="line"><span class="keyword">int</span> k[<span class="number">5</span>];</span><br><span class="line"><span class="comment">//递归用回溯法解决tsp问题</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TSP</span><span class="params">(<span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//递归出口</span></span><br><span class="line">    <span class="keyword">if</span> (t &gt; <span class="number">5</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//处理边界问题即最后一个结点回到第一个结点的问题</span></span><br><span class="line">    <span class="keyword">if</span> (t == <span class="number">5</span> &amp;&amp; g[x[t - <span class="number">1</span>]][x[<span class="number">1</span>]] &gt;= <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (cp + g[x[t - <span class="number">1</span>]][x[<span class="number">1</span>]] &lt;= bestp)</span><br><span class="line">        &#123;</span><br><span class="line">            bestp = cp + g[x[t - <span class="number">1</span>]][x[<span class="number">1</span>]];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">4</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                k[i] = x[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (m[i] == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            x[t] = i; </span><br><span class="line">            <span class="comment">//标记已被访问过的结点</span></span><br><span class="line">            m[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="comment">//满足约束条件</span></span><br><span class="line">            <span class="keyword">if</span> ((g[x[t - <span class="number">1</span>]][x[t]] &gt;= <span class="number">0</span>) &amp;&amp; (cp + g[x[t - <span class="number">1</span>]][x[t]] &lt; bestp))</span><br><span class="line">            &#123;</span><br><span class="line">                cp += g[x[t - <span class="number">1</span>]][x[t]];</span><br><span class="line">                TSP(t + <span class="number">1</span>);</span><br><span class="line">                <span class="comment">//回溯</span></span><br><span class="line">                cp -= g[x[t - <span class="number">1</span>]][x[t]];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//回溯</span></span><br><span class="line">            m[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出最优值与最优解</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Display</span><span class="params">(<span class="keyword">int</span> x[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, bestp);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, k[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    TSP(<span class="number">2</span>);</span><br><span class="line">    Display(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="代码改进-参照书本"><a href="#代码改进-参照书本" class="headerlink" title="代码改进(参照书本)"></a>代码改进(参照书本)</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NUM 101</span></span><br><span class="line"><span class="keyword">int</span> MAXINT = <span class="number">9999999</span>;  <span class="comment">//无穷大表示不相邻</span></span><br><span class="line"><span class="keyword">int</span> bestx[NUM];</span><br><span class="line"><span class="keyword">int</span> g[NUM][NUM];</span><br><span class="line"><span class="keyword">int</span> x[NUM];</span><br><span class="line"><span class="keyword">int</span> bestc = MAXINT;</span><br><span class="line"><span class="keyword">int</span> cl = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> m;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>* a, <span class="keyword">int</span>* b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    t = *a;</span><br><span class="line">    *a = *b;</span><br><span class="line">    *b = t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">travelingREC</span><span class="params">(<span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//递归出口</span></span><br><span class="line">    <span class="keyword">if</span> (t == n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (g[x[n - <span class="number">1</span>]][x[n]] &lt; MAXINT &amp;&amp; g[x[n]][x[<span class="number">1</span>]] &lt; MAXINT &amp;&amp; cl + g[x[n - <span class="number">1</span>]][x[n]] + g[x[n]][x[<span class="number">1</span>]] &lt; bestc)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                bestx[i] = x[i];</span><br><span class="line">            &#125;</span><br><span class="line">            bestc = cl + g[x[n - <span class="number">1</span>]][x[n]] + g[x[n]][x[<span class="number">1</span>]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//尝试解</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = t; i &lt;= n; i++)   <span class="comment">//从t开始避免重复</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (g[x[t - <span class="number">1</span>]][x[i]] &lt; MAXINT &amp;&amp; cl + g[x[t - <span class="number">1</span>]][x[i]] &lt; bestc)</span><br><span class="line">            &#123;</span><br><span class="line">                swap(&amp;x[t], &amp;x[i]);</span><br><span class="line">                cl = cl + g[x[t - <span class="number">1</span>]][x[t]];</span><br><span class="line">                travelingREC(t + <span class="number">1</span>);</span><br><span class="line">                cl = cl - g[x[t - <span class="number">1</span>]][x[t]];</span><br><span class="line">                swap(&amp;x[t], &amp;x[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n = <span class="number">4</span>;</span><br><span class="line">    m = <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; NUM; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; NUM; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            g[i][j] = MAXINT;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    g[<span class="number">1</span>][<span class="number">2</span>] = g[<span class="number">2</span>][<span class="number">1</span>] = <span class="number">20</span>;</span><br><span class="line">    g[<span class="number">1</span>][<span class="number">4</span>] = g[<span class="number">4</span>][<span class="number">1</span>] = <span class="number">4</span>;</span><br><span class="line">    g[<span class="number">1</span>][<span class="number">3</span>] = g[<span class="number">3</span>][<span class="number">1</span>] = <span class="number">6</span>;</span><br><span class="line">    g[<span class="number">2</span>][<span class="number">3</span>] = g[<span class="number">3</span>][<span class="number">2</span>] = <span class="number">5</span>;</span><br><span class="line">    g[<span class="number">2</span>][<span class="number">4</span>] = g[<span class="number">4</span>][<span class="number">2</span>] = <span class="number">10</span>;</span><br><span class="line">    g[<span class="number">3</span>][<span class="number">4</span>] = g[<span class="number">4</span>][<span class="number">3</span>] = <span class="number">15</span>;</span><br><span class="line">    <span class="comment">//初始化解向量顺序，顺序不唯一但不能全为 0 </span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        x[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    travelingREC(<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"最短路径为: %d\n解向量为: "</span>, bestc);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d, "</span>, bestx[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    getchar();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法设计与分析</category>
      </categories>
      <tags>
        <tag>回溯法</tag>
      </tags>
  </entry>
  <entry>
    <title>Solving Equations</title>
    <url>/2020/05/04/Solving%20Equations/</url>
    <content><![CDATA[<h1 id="Solving-Equations"><a href="#Solving-Equations" class="headerlink" title="Solving Equations"></a>Solving Equations</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>任给一个等式，等式中不含有任何算术运算符，只含有数字，括号与等号；等式右边的计算没有优先规则，从左到右进行计算，有括号先计算括号内的；只能在等式中填入加，减和乘号使得等式成立。<br>例如 18 = 7 (5 3) 2，一种可能的结果为 18 = 7 + (5 - 3) * 2;<br>又例如 5 = 3 3,显然不为等式。</p>
<h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>每个运算符的位置都能放加，减和乘，显然解空间为完全 3 叉树。<br>我们建立一个a数组用来保存输入的等式原值，iLeft变量代表等式左值，用指针遍历a数组，记下a数组中需要添加运算符的位置，并记在op数组中，同时略过a数组中的等号及等号左边的数，将等号右边的式子略过空格并标记运算符位置存到b数组中，接着开始递归回溯，得到解。</p>
<h2 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctype.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LEFT -1            <span class="comment">//左括号</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RIGHT -2           <span class="comment">//右括号</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MUL -3             <span class="comment">//*号</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ADD -4             <span class="comment">//+号</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SUB -5             <span class="comment">//-号</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OP -6              <span class="comment">//该位置有运算符</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NONE -10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> a[<span class="number">100</span>];        <span class="comment">//原始的等式数据</span></span><br><span class="line"><span class="keyword">int</span> b[<span class="number">100</span>];         <span class="comment">//伪表达式</span></span><br><span class="line"><span class="keyword">int</span> best[<span class="number">100</span>];      <span class="comment">//答案</span></span><br><span class="line"><span class="keyword">int</span> op[<span class="number">30</span>];         <span class="comment">//运算符在数组b中的位置</span></span><br><span class="line"><span class="keyword">int</span> bn;             <span class="comment">//数组b的项数</span></span><br><span class="line"><span class="keyword">int</span> iLeft;          <span class="comment">//等式左边的数</span></span><br><span class="line"><span class="keyword">int</span> apos;           <span class="comment">//数组a的位置指针</span></span><br><span class="line"><span class="keyword">int</span> bpos;           <span class="comment">//数组b的位置指针</span></span><br><span class="line"><span class="keyword">int</span> opos;           <span class="comment">//操作符数组的位置指针</span></span><br><span class="line"><span class="keyword">int</span> possible;       <span class="comment">//是否有解</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compute</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bracket</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">space</span><span class="params">()</span>  <span class="comment">//跳过数字之间的空格</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (a[apos] &amp;&amp; (a[apos] == <span class="string">' '</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        apos++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compute</span><span class="params">()</span> <span class="comment">//计算右边表达式值的算法</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//右边第一个数</span></span><br><span class="line">    <span class="keyword">int</span> sum = bracket();</span><br><span class="line">    <span class="keyword">while</span> (b[bpos] == MUL || b[bpos] == ADD || b[bpos] == SUB)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> operation = b[bpos++];   <span class="comment">//取出运算符</span></span><br><span class="line">        <span class="keyword">int</span> ret = bracket();         <span class="comment">//取出下一个数</span></span><br><span class="line">        <span class="comment">//根据运算符进行运算</span></span><br><span class="line">        <span class="keyword">switch</span> (operation)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> MUL: sum *= ret; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> ADD: sum += ret; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> SUB: sum -= ret; <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bracket</span><span class="params">()</span>  <span class="comment">//括号的判断及数值计算</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum;</span><br><span class="line">    <span class="keyword">if</span> (b[bpos] == LEFT)</span><br><span class="line">    &#123;</span><br><span class="line">        bpos++;</span><br><span class="line">        sum = compute();  <span class="comment">//计算括号里面的值</span></span><br><span class="line">        bpos++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        sum = b[bpos++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">backtrack</span><span class="params">(<span class="keyword">int</span> dep)</span> <span class="comment">//形参dep表示第几个运算符</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (possible)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;      <span class="comment">//得到答案</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> i; </span><br><span class="line">    <span class="keyword">if</span> (dep == opos)      <span class="comment">//所有运算符构造完毕</span></span><br><span class="line">    &#123;</span><br><span class="line">        bpos = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> iRight = compute(); </span><br><span class="line">        <span class="keyword">if</span> (iRight == iLeft)  </span><br><span class="line">        &#123;</span><br><span class="line">            possible = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; bn; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                best[i] = b[i];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//当前结点的3个孩子结点，分别使用+，-和*运算符进行构造</span></span><br><span class="line">    b[op[dep]] = MUL; backtrack(dep + <span class="number">1</span>);</span><br><span class="line">    b[op[dep]] = ADD; backtrack(dep + <span class="number">1</span>);</span><br><span class="line">    b[op[dep]] = SUB; backtrack(dep + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span>* q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d = "</span>, iLeft);</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; bn; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">switch</span> (q[i])</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> ADD: <span class="built_in">printf</span>(<span class="string">"+"</span>); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> MUL: <span class="built_in">printf</span>(<span class="string">"*"</span>); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> SUB: <span class="built_in">printf</span>(<span class="string">"-"</span>); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> LEFT: <span class="built_in">printf</span>(<span class="string">"("</span>); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> RIGHT: <span class="built_in">printf</span>(<span class="string">")"</span>); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> OP: <span class="built_in">printf</span>(<span class="string">"?"</span>); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>: <span class="built_in">printf</span>(<span class="string">"%d"</span>, q[i]); <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> iCase = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">while</span> (gets_s(a) &amp;&amp; <span class="built_in">strchr</span>(a, <span class="string">'='</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        possible = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">90</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            b[i] = NONE;</span><br><span class="line">        &#125;</span><br><span class="line">        apos = <span class="number">0</span>;</span><br><span class="line">        sscanf_s(a, <span class="string">"%d"</span>, &amp;iLeft);</span><br><span class="line">        <span class="keyword">while</span> (a[apos] &amp;&amp; <span class="built_in">isdigit</span>(a[apos]))</span><br><span class="line">        &#123;</span><br><span class="line">            apos++;</span><br><span class="line">        &#125;</span><br><span class="line">        space();</span><br><span class="line">        apos++;</span><br><span class="line">        bn = <span class="number">0</span>;</span><br><span class="line">        opos = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (space(), a[apos])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[apos] == <span class="string">'('</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                b[bn++] = LEFT;</span><br><span class="line">                apos++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (a[apos] == <span class="string">')'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                b[bn++] = RIGHT;</span><br><span class="line">                apos++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                sscanf_s(a + apos, <span class="string">"%d"</span>, &amp;b[bn++]);</span><br><span class="line">                <span class="keyword">while</span> (a[apos] &amp;&amp; <span class="built_in">isdigit</span>(a[apos])) apos++;</span><br><span class="line">            &#125;</span><br><span class="line">            space();</span><br><span class="line">            <span class="comment">//如果不是结尾和')'，则说明bn指向的地方有一个运算符</span></span><br><span class="line">            <span class="keyword">if</span> (a[apos] &amp;&amp; a[apos] != <span class="string">')'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                op[opos++] = bn;    <span class="comment">//记下运算符的位置</span></span><br><span class="line">                b[bn++] = OP;       <span class="comment">//在数组b中标记此处为运算符</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        backtrack(<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Equation #%d:\n"</span>, ++iCase);</span><br><span class="line">        <span class="keyword">if</span> (bn == <span class="number">1</span> &amp;&amp; iLeft == b[<span class="number">0</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d = %d\n"</span>, iLeft, iLeft);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (bn == <span class="number">0</span> || !possible)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Impossible\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">print</span>(best);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法设计与分析</category>
      </categories>
      <tags>
        <tag>回溯法</tag>
      </tags>
  </entry>
  <entry>
    <title>重拾汇编</title>
    <url>/2020/05/06/%E6%B1%87%E7%BC%96/</url>
    <content><![CDATA[<h1 id="8个32位通用寄存器"><a href="#8个32位通用寄存器" class="headerlink" title="8个32位通用寄存器"></a>8个32位通用寄存器</h1><p>EAX<br>EBX<br>ECX<br>EDX<br>ESP<br>EBP<br>ESI<br>EDI  </p>
<h1 id="基本汇编指令"><a href="#基本汇编指令" class="headerlink" title="基本汇编指令"></a>基本汇编指令</h1><h2 id="mov指令语法"><a href="#mov指令语法" class="headerlink" title="mov指令语法"></a>mov指令语法</h2><p><strong>r代表寄存器，m代表内存，imm代表立即数</strong><br>mov r/m8,r8<br>mov r/m16,r16<br>mov r/m32,r32<br>mov r8,r/m8<br>mov r16,r/m16<br>mov r32,r/m32<br>mov r8,imm8<br>mov r16,imm16<br>mov r32,imm32<br>mov指令不允许内存到内存<br>例： mov dword ptr ds:[0x00000000],0x12345678</p>
<h2 id="mov指令偏移地址-中允许的数"><a href="#mov指令偏移地址-中允许的数" class="headerlink" title="mov指令偏移地址[]中允许的数"></a>mov指令偏移地址[]中允许的数</h2><p>形式一：[立即数]<br>形式二：[寄存器]<br>形式三：[寄存器+立即数]<br>形式四：[寄存器+寄存器乘{1，2，4，8}]</p>
<h2 id="add-sub-and-or-not指令"><a href="#add-sub-and-or-not指令" class="headerlink" title="add,sub,and,or,not指令"></a>add,sub,and,or,not指令</h2><p>指令运行完毕结果存在第一个操作数中<br>add r/m,imm(8,16,32,前后须一致)<br>add r/m,r(8,16,32)<br>add r,r/m(8,16,32)<br>sub 同理<br>and 指与运算，语法同理<br>or 指或运算，语法同理<br>xor 指异或运算，语法同理<br>例：xor byte ptr ds:[0x00000000],eax<br>not 即为非指令<br>not r/m(8,16,32)</p>
<h2 id="lea指令"><a href="#lea指令" class="headerlink" title="lea指令"></a>lea指令</h2><p>lea是“load effective address”的缩写，简单的说，lea指令可以用来将一个内存地址直接赋给目的操作数，例如：lea eax,[ebx+8]就是将ebx+8这个值直接赋给eax，而不是把ebx+8处的内存地址里的数据赋给eax。</p>
<h3 id="mov与lea两者的区别"><a href="#mov与lea两者的区别" class="headerlink" title="mov与lea两者的区别"></a>mov与lea两者的区别</h3><p>mov指令则恰恰相反，例如：mov eax,[ebx+8]则是把内存地址为ebx+8处的数据赋给eax。</p>
<h2 id="movs指令"><a href="#movs指令" class="headerlink" title="movs指令"></a>movs指令</h2><p>movs指令用来移动数据，可从内存到内存<br>byte/word/dword<br>movs byte ptr es:[edi],byte ptr ds:[esi] 可简写为 movsb<br>movs word ptr es:[edi],word ptr ds:[esi] 可简写为 movsw<br>movs dword ptr es:[edi],dword ptr ds:[esi] 可简写为 movsd<br>EFL中 32位二进制数据从右往左下标为 10 (从 0 开始)的标志为DF<br>DF = 1，则ESI与EDI自动减一个数据块大小(byte, word, dword)<br>DF = 0，则ESI与EDI自动加一个数据块大小  </p>
<h2 id="stos指令"><a href="#stos指令" class="headerlink" title="stos指令"></a>stos指令</h2><p>将al/ax/eax的值存储到[EDI]指定的内存单元<br>stos byte ptr es:[edi]  简写为stosb<br>stos word ptr es:[edi]  简写为stosw<br>stos dword ptr es:[edi]  简写为stosd</p>
<h2 id="rep指令"><a href="#rep指令" class="headerlink" title="rep指令"></a>rep指令</h2><p>按计数寄存器(ecx)中指定的次数重复执行字符串指令<br>mov ecx,10<br>rep movsd<br>rep stosd</p>
<h2 id="esp寄存器"><a href="#esp寄存器" class="headerlink" title="esp寄存器"></a>esp寄存器</h2><p>esp为栈指针寄存器，用来反映当前的堆栈用到哪里了  </p>
<h2 id="push指令"><a href="#push指令" class="headerlink" title="push指令"></a>push指令</h2><p>功能：<br>（1）向栈中压入数据<br>（2) 修改栈顶指针ESP寄存器<br>指令格式：<br>1，push r<br>2，push m<br>3，push imm</p>
<h2 id="pop指令"><a href="#pop指令" class="headerlink" title="pop指令"></a>pop指令</h2><p>功能：<br>（1）将栈顶数据存储到寄存器/内存<br>（2）修改栈顶指针ESP寄存器<br>指令格式：<br>1，pop r<br>2，pop m</p>
<h2 id="jmp-call-ret指令"><a href="#jmp-call-ret指令" class="headerlink" title="jmp,call,ret指令"></a>jmp,call,ret指令</h2><p>jmp用来修改寄存器EIP的值<br>指令格式：<br>jmp r/m/imm(位数必须与EIP寄存器位数相同)<br>call指令：<br>push 下一行指令地址<br>mov eip，立即数/寄存器/内存<br>简写为：call 立即数/寄存器/内存<br>与jmp唯一的区别：<br>在栈中存储call指令下一行地址<br>ret指令：<br>指令格式：retn+立即数(4,8…)<br>功能：<br>mov eip,[esp]<br>add esp,立即数</p>
<h2 id="栈平衡"><a href="#栈平衡" class="headerlink" title="栈平衡"></a>栈平衡</h2><p>1）如果要返回父程序，则当我们在栈中进行栈的操作的时候，一定要保证在ret这条指令之前，ESP指向的是我们压入栈中的地址。<br>2）如果通过栈传递参数了，那么在函数执行完毕后，要平衡参数导致的栈变化。</p>
<h2 id="EBP寻址"><a href="#EBP寻址" class="headerlink" title="EBP寻址"></a>EBP寻址</h2><p>举例：<br>push ebp<br>mov ebp,esp<br>sub esp,0x–<br>mov eax,dword ptr ss:[ebp+8]<br>add eax,dword ptr ss:[ebp+0xC]<br>mov ebp,esp<br>pop ebp<br>retn  </p>
<h2 id="JCC指令"><a href="#JCC指令" class="headerlink" title="JCC指令"></a>JCC指令</h2><p>标志寄存器：EFLAGS<br>0  1  2  3  4  5  6  7  8  9  10 11<br>CF 1  PF 0  AF 0  ZF SF TF IF DF OF  </p>
<p>CF(bit 0)[Carry Flag]<br>若算数操作产生的结果在最高有效位发生进位或借位则将其置1，反之清零。<br>这个标志通常用来指示无符号整型运算的溢出状态。  </p>
<p>PF(bit 2)[Parity Flag]<br>如果结果的最低有效字节包含偶数个1位则该位置1，否则清零。<br>利用PF可进行奇偶校验检查<br>需要传输”11001110”，数据中含5个”1”，所以其奇校验位为”0”，同时把”110011100”传输给接收方，接收方收到数据后再一次计算奇偶性，”110011100”中仍然含有5个”1”，所以接收方计算出的奇校验位还是”0”，与发送方一致，表示在此次传输过程中未发生错误。<br>例子：<br>MOV AL,0xCE<br>ADD AL,0  </p>
<p>AF(bit 4)[Auxillary Carry Flag]<br>如果算术操作在结果的第三位发生进位或借位则将该标志置1，否则清零。<br>这个标志在BCD算术运算中被使用。  </p>
<p>ZF(bit 6)[Zero Flag]<br>若结果为0则将其置1，反之清零。<br>经常与CMP或者TEST等指令一起使用  </p>
<p>判断2个值是否相等<br>MOV EAX,100<br>MOV ECX,100<br>CMP EAX,ECX<br>(CMP 指令相当于SUB指令,但是相减的结果并不保存到第一个操作数中)  </p>
<p>判断某个值是否为0<br>TEST EAX,EAX<br>(TEST指令相当于AND指令,但是与的结果并不保存到第一个操作数中)  </p>
<p>SF(bit 7)[Sign Flag]<br>该标志被设置为有符号整型的最高有效位。(0指示结果为正，反之则为负)<br>例子：<br>MOV AL,0x7F<br>MOV AL,0xFE<br>ADD AL,2<br>ADD AL,2</p>
<p>OF(bit 11)[Overflow Flag]<br>溢出标志OF用于反映有符号数加减运算所得结果是否溢出。<br>可以这样理解：<br>如果是无符号数运算，是否溢出看CF位<br>如果是有符号数运算，是否溢出看OF位  </p>
<p>DF(bit 10)[Direction Flag]<br>这个方向标志控制串指令(MOVS, CMPS, SCAS, LODS以及STOS)。设置DF标志使得串指令自动递减(从高地址向低地址方向处理字符串),清除该标志则使得串指令自动递增。<br>STD以及CLD指令分别用于设置以及清除DF标志。   </p>
]]></content>
      <categories>
        <category>汇编基础</category>
      </categories>
      <tags>
        <tag>汇编</tag>
      </tags>
  </entry>
  <entry>
    <title>n-皇后问题</title>
    <url>/2020/04/27/n-%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="n-皇后问题"><a href="#n-皇后问题" class="headerlink" title="n-皇后问题"></a>n-皇后问题</h1><p>在解决n皇后问题之前，我们先说明一下回溯法</p>
<h2 id="回溯法解决问题的一般步骤及回溯法的特征"><a href="#回溯法解决问题的一般步骤及回溯法的特征" class="headerlink" title="回溯法解决问题的一般步骤及回溯法的特征"></a>回溯法解决问题的一般步骤及回溯法的特征</h2><p>1，针对给出问题，给出解空间；  </p>
<p>2，确定易于搜索的解空间组织结构；  </p>
<p>3，以深度优先的方式搜索解空间，并在搜索中使用剪枝函数避免不必要的搜索。（回溯时可采用递归回溯与迭代回溯）  </p>
<p>用回溯法解题显著特征为在搜索过程中动态产生问题的解空间（分为排列树与子集树），任何时刻，算法只保存从根结点到当前扩展结点的路径。</p>
<h2 id="n-皇后问题的解空间"><a href="#n-皇后问题的解空间" class="headerlink" title="n-皇后问题的解空间"></a>n-皇后问题的解空间</h2><p>数组 x[i] 代表第 i 行的皇后放置在第 x[i] 列上  </p>
<p>若显式约束为 i != j 时，x[i] != x[j]，那么显然皇后问题解空间为n!种排列，因此构造的树为排列树。</p>
<h2 id="n-皇后问题排列树采用剪枝函数压缩结点数"><a href="#n-皇后问题排列树采用剪枝函数压缩结点数" class="headerlink" title="n-皇后问题排列树采用剪枝函数压缩结点数"></a>n-皇后问题排列树采用剪枝函数压缩结点数</h2><p>剪枝函数为：<strong>0 &lt;= i, j &lt;= n, if i != j, then x[i] != x[j] &amp;&amp; |x[i] - x[j]| != |i-j|</strong></p>
<h2 id="采用递归算法实现回溯法解决n-皇后问题"><a href="#采用递归算法实现回溯法解决n-皇后问题" class="headerlink" title="采用递归算法实现回溯法解决n-皇后问题"></a>采用递归算法实现回溯法解决n-皇后问题</h2><p>代码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//判断皇后摆放是否冲突，即剪枝函数</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">place</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="comment">//从 1 到 t - 1 行分别判断是否冲突</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; t; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//若满足if判断条件则说明皇后摆放冲突</span></span><br><span class="line">        <span class="keyword">if</span>((x[i] == x[t]) || <span class="built_in">abs</span>(t - i) == <span class="built_in">abs</span>(x[t] - x[i]))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">nQueensRec</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> t, <span class="keyword">int</span> N)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="comment">//输出一个可行解</span></span><br><span class="line">    <span class="keyword">if</span>(t &gt; N)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d, "</span>,x[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//一个一个尝试皇后的摆放</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            x[t] = i;</span><br><span class="line">            <span class="comment">//若不冲突，则继续摆放下一行的皇后</span></span><br><span class="line">            <span class="keyword">if</span>(place(x, t))</span><br><span class="line">            &#123;</span><br><span class="line">                nQueensRec(x, t + <span class="number">1</span>, N);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//保存皇后的位置</span></span><br><span class="line">    <span class="keyword">int</span> x[<span class="number">9</span>];</span><br><span class="line">    nQueensRec(x, <span class="number">1</span>, <span class="number">8</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法设计与分析</category>
      </categories>
      <tags>
        <tag>回溯法</tag>
      </tags>
  </entry>
  <entry>
    <title>最大子段和问题</title>
    <url>/2020/04/21/%E6%9C%80%E5%A4%A7%E5%AD%90%E6%AE%B5%E5%92%8C%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="最大子段和问题"><a href="#最大子段和问题" class="headerlink" title="最大子段和问题"></a>最大子段和问题</h1><h2 id="递归关系分析"><a href="#递归关系分析" class="headerlink" title="递归关系分析"></a>递归关系分析</h2><p>首先定义 b[j] 表示 i 从 1 变到 j 时每个a[i]+a[i+1]+…+a[j] 比较的最大值，<br>那么数组 b[j], 1 &lt;= j &lt;= n的最大值即为a数组的最大字段和  </p>
<p>根据b[j]的定义，我们有:<br><strong>b[j-1] &gt; 0时, b[j] = b[j-1] + a[j]<br>否则 b[j] = a[j]</strong></p>
<p>由此有b[j]的动态规划递推式:<br><strong>1 &lt;= j &lt;= n 时, b[j] = max{b[j-1] + a[j], a[j]}</strong></p>
<h2 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NUM 101</span></span><br><span class="line"><span class="keyword">int</span> a[NUM];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxsum</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b &gt; <span class="number">0</span>) b += a[i];</span><br><span class="line">        <span class="keyword">else</span> b = a[i];</span><br><span class="line">        <span class="keyword">if</span>(b &gt; sum) sum = b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法设计与分析</category>
      </categories>
      <tags>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>矩阵连乘优化</title>
    <url>/2020/04/21/%E7%9F%A9%E9%98%B5%E8%BF%9E%E4%B9%98%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h1 id="矩阵连乘优化问题"><a href="#矩阵连乘优化问题" class="headerlink" title="矩阵连乘优化问题"></a>矩阵连乘优化问题</h1><h2 id="穷举法的问题"><a href="#穷举法的问题" class="headerlink" title="穷举法的问题"></a>穷举法的问题</h2><p>穷举法即找出每一种完全加括号方式相应需要的数乘次数    </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">设n &#x3D; 1时，p(n) &#x3D; 1</span><br><span class="line">n &gt;&#x3D; 2时，p(n) &#x3D; p(1) * p(n-1) + p(2) * p(n-2) + ... + p(n-1) * p(1)</span><br><span class="line">p(n)实际为catalan数</span><br><span class="line">p(n) &#x3D; C(n-1) 其中C(n) &#x3D; 1*(2n n)&#x2F;(n+1)     (2n n)表示从2n个元素中选出n个元素的组合数</span><br></pre></td></tr></table></figure>
<p>时间复杂度呈指数级增长，不推荐。</p>
<h2 id="采用动态规划法进行优化"><a href="#采用动态规划法进行优化" class="headerlink" title="采用动态规划法进行优化"></a>采用动态规划法进行优化</h2><h3 id="1，分析最优子结构特性"><a href="#1，分析最优子结构特性" class="headerlink" title="1，分析最优子结构特性"></a>1，分析最优子结构特性</h3><h3 id="2，建立递归关系"><a href="#2，建立递归关系" class="headerlink" title="2，建立递归关系"></a>2，建立递归关系</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">定义计算A[i][j]所需要的最优次数为m[i][j],p[]数组存放矩阵的维数，因为矩阵可乘必有相邻矩阵行列相等，因此用p[i-1],p[i]来表示每个矩阵Ai的维数。</span><br><span class="line">i &#x3D; j, m[i][j] &#x3D; 0</span><br><span class="line">i &lt; j, m[i][j] &#x3D; min&#123;m[i][k] + m[k+1][j] + p[i-1] * p[k] * p[j]&#125; (i &lt;&#x3D; k &lt; j)</span><br></pre></td></tr></table></figure>
<h3 id="3，计算最优值"><a href="#3，计算最优值" class="headerlink" title="3，计算最优值"></a>3，计算最优值</h3><h3 id="4，构造最优解"><a href="#4，构造最优解" class="headerlink" title="4，构造最优解"></a>4，构造最优解</h3><h2 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//矩阵连乘动态规划算法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">matrixChain</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> **p, <span class="keyword">int</span> **m, <span class="keyword">int</span> **s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//将对角线置为零，即矩阵自身数乘次数为零</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">       m[i][i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//数组的上斜对角线数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> r = <span class="number">2</span>； r &lt;= n; r++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">//每个斜对角线的行</span></span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n - r + <span class="number">1</span>; i++)</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="comment">//每个斜对角线的列</span></span><br><span class="line">         <span class="keyword">int</span> j = i + r - <span class="number">1</span>;</span><br><span class="line">         <span class="comment">//计算初值，便于比较并替换最小值</span></span><br><span class="line">         m[i][j] = m[i+<span class="number">1</span>][j] + p[i<span class="number">-1</span>] * p[i] * p[j];</span><br><span class="line">         <span class="comment">//s[i][j]用来保存断点</span></span><br><span class="line">         s[i][j] = i;</span><br><span class="line">         <span class="keyword">for</span>(<span class="keyword">int</span> k = i + <span class="number">1</span>; k &lt; j; k++)</span><br><span class="line">         &#123;</span><br><span class="line">            <span class="keyword">int</span> t = m[i][k] + m[k+<span class="number">1</span>][j] + p[i<span class="number">-1</span>] * p[k] * p[j];</span><br><span class="line">            <span class="keyword">if</span>(t &lt; m[i][j])</span><br><span class="line">            &#123;</span><br><span class="line">               m[i][j] = t;</span><br><span class="line">               s[i][j] = k;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//递归构造最优解</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traceBack</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> **s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i == j) <span class="keyword">return</span>;</span><br><span class="line">    traceBack(i, s[i][j], s);</span><br><span class="line">    traceBack(s[i][j] + <span class="number">1</span>, j, s);</span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法设计与分析</category>
      </categories>
      <tags>
        <tag>动态规划</tag>
      </tags>
  </entry>
</search>
